schema {
  query: RootQuery
}

"""Root Query"""
type RootQuery {
  metroStations(after: String, first: Int, before: String, last: Int): MetroStations
  metroStation(findBy: FindByInput!): MetroStation
  metroLine(findBy: FindByInput!): MetroLine
}

"""Information about the metro stations of the city of Barcelona"""
type MetroStations {
  """Connection with the data about stations"""
  stations: MetroStationConnection

  """Total number of stations"""
  numberOfStations: Int
}

"""A connection to a list of items."""
type MetroStationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MetroStationEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MetroStationEdge {
  """The item at the end of the edge"""
  node: MetroStation

  """A cursor for use in pagination"""
  cursor: String!
}

"""Metro station information"""
type MetroStation {
  """Unique ID of the station"""
  id: ID

  """Name of the station"""
  name: String

  """Location coordinates of the station"""
  location: Coordinates

  """Lines the station belongs to e.g. L1, L2"""
  lines: [String]
}

"""Coordinates (Latitude, Longitude, Altitude), of a given station/stop"""
type Coordinates {
  latitude: Float
  longitude: Float
  altitude: Float
}

"""
Input for the FindBy argument of the queries, which allows finding an entity by some parameters (e.g. name or id)
"""
input FindByInput {
  id: Int
  name: String
}

"""Metro line information"""
type MetroLine {
  """Numeric Code of the line"""
  id: Int

  """Name of the line"""
  name: String

  """Origin station of the line"""
  originStation: MetroStation

  """Ending station of the line"""
  endingStation: MetroStation

  """Stations of the line"""
  stations(after: String, first: Int, before: String, last: Int): MetroStationConnection

  """Color of the line represented as a Hexadecimal string"""
  color: String
}
